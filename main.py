# Author:   Ruslan G. Sobolev
# Support:  r.g.sobolev@ya.ru
# Project:  Master of test - telegram bot
#
# Main script of telegram bot

import telebot
import json

from telebot import types

TOKEN = '6213894744:AAHGezbcf5juvm06n81sJGlutPJw51slUz4'

bot = telebot.TeleBot(TOKEN)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ '/start' –∏ '/help'
@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    bot.reply_to(message, """\
–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ö–≤–∏–∑-–ë–æ—Ç.
–í —ç—Ç–æ–º —á–∞—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç. –î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /quiz.\
""")

def status_w(chat_id):
    # —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª-–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ 1 –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ 
    chat_id = str(chat_id)
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ë–î –¥–ª—è —á—Ç–µ–Ω–∏—è
    with open('db\client.json') as json_file:
        data = json.load(json_file)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    if not (chat_id in data):
    #     data[chat_id]['status'] += 1
    #     data[chat_id]['name'] = "–†—É—Å–ª–∞–Ω"
    # else:
        new_chat = {chat_id: {'status': 1, 'points': 0}}
        data.update(new_chat)
    file = open('db\client.json', 'w')
    file.write(json.dumps(data))
    file.close()

def status_restart(chat_id):
    # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
    chat_id = str(chat_id)
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ë–î –¥–ª—è —á—Ç–µ–Ω–∏—è
    with open('db\client.json') as json_file:
        data = json.load(json_file)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    if (chat_id in data):
        data[chat_id]['status'] = 1
        data[chat_id]['points'] = 0
    else:
        new_chat = {chat_id: {'status': 1, 'points': 0}}
        data.update(new_chat)
    file = open('db\client.json', 'w')
    file.write(json.dumps(data))
    file.close()


def point_summ(chat_id, point):
    # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤
    chat_id = str(chat_id)
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ë–î –¥–ª—è —á—Ç–µ–Ω–∏—è
    with open('db\client.json') as json_file:
        data = json.load(json_file)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    if (chat_id in data):
        data[chat_id]['points'] += point
        data[chat_id]['status'] += 1
    else:
        new_chat = {chat_id: {'status': 1, 'points': 0}}
        data.update(new_chat)
    file = open('db\client.json', 'w')
    file.write(json.dumps(data))
    file.close()


def status_r(chat_id):
    # —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    chat_id = str(chat_id)
    # –£–∑–Ω–∞–µ–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
    with open('db\client.json') as json_file:
        data = json.load(json_file)
    return data[chat_id]['status']

def get_answers(markup, status1):
    # —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–≤–µ—Ç–∞–º–∏
    status1 = str(status1)
    with open('questions.json') as json_file:
        data = json.load(json_file)
    for key, result in data[status1]['answers'].items():
        markup.row(types.InlineKeyboardButton(key, callback_data=result))
    # status = status + 1
    return markup

def get_question(status1):
     # —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
     status1 = str(status1)
     with open('questions.json') as json_file:
        data = json.load(json_file)
     return data[status1]['question']

def get_len_question():
     # —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª-–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
     with open('questions.json') as json_file:
        data = json.load(json_file)
     return len(data)

def get_points(chat_id):
     # —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç
     chat_id = str(chat_id)
     with open('questions.json') as json_file:
        questions = json.load(json_file)
     with open('db\client.json') as json_file:
        client = json.load(json_file)
     return str(client[chat_id]['points']) + "/" + str(len(questions))

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz
@bot.message_handler(commands=['quiz'])
def send_quiz(message):
    # bot.reply_to(message, "{0.first_name}, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑-–ë–æ—Ç <b>{1.first_name}</b>!\n".format(message.from_user, bot.get_me()), parse_mode='html')
    bot.send_message(message.chat.id, "{0.first_name}, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç <b>{1.first_name}</b>!\n".format(message.from_user, bot.get_me()), parse_mode='html')
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    status_w(message.chat.id)
    status = status_r(message.chat.id)
    question_count = get_len_question()
    if status > question_count:
        #–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞
        markup = markup.row(types.InlineKeyboardButton('–ï—â–µ —Ä–∞–∑', callback_data='restart'))
        quest = '–ù–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞'
    elif status > 2:
        # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        markup = markup.row(types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='continue'))
        quest = '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'
    else:
        # –ù–∞—á–∞—Ç—å 
        markup = markup.row(types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç', callback_data='start'))
        quest = '–¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ <b>¬´–õ—é–±–æ–≤—å –∏ –≥–æ–ª—É–±–∏¬ª</b>: \n–Ω–∞ –≤—Å–µ 14 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ —Å–º–æ—Ç—Ä–µ–ª –±–æ–ª—å—à–µ 10 —Ä–∞–∑. \n–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç\"üëá'
        # markup = get_answers(markup, status)
        # quest = get_question(status)
    bot.send_message(message.chat.id, quest, parse_mode='html', reply_markup=markup)

# answer
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            markup = types.InlineKeyboardMarkup(row_width=1)
            status_end = get_len_question()
            if call.data == 'correct':
                status = status_r(call.message.chat.id)
                point_summ(call.message.chat.id, 1)
                points = get_points(call.message.chat.id)
                ans1 = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!üòé\n\n–í–∞—à —Å—á–µ—Ç ' + points
                if status == status_end:
                    markup.row(types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç!', callback_data='next'))
                else:
                    markup.row(types.InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', callback_data='next'))
            elif call.data == 'wrong':
                status = status_r(call.message.chat.id)
                point_summ(call.message.chat.id, 0)
                points = get_points(call.message.chat.id)
                ans1 = '–£–≤—ã, –æ—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–πüòî\n\n–í–∞—à —Å—á–µ—Ç ' + points
                if status == status_end:
                    markup.row(types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç!', callback_data='next'))
                else:
                    markup.row(types.InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', callback_data='next'))
            elif call.data == 'start':
                status = status_r(call.message.chat.id)
                ans1 = get_question(status)
                markup = get_answers(markup, status)
                # status_w(call.message.chat.id)
            elif call.data == 'restart':
                status_restart(call.message.chat.id)
                status = status_r(call.message.chat.id)
                ans1 = get_question(status)
                markup = get_answers(markup, status)
                status_w(call.message.chat.id)
            elif call.data == 'continue':
                # status_restart(call.message.chat.id)
                status = status_r(call.message.chat.id)
                ans1 = get_question(status)
                markup = get_answers(markup, status)
                status_w(call.message.chat.id)
            elif call.data == 'next':
                status = status_r(call.message.chat.id)
                if status > get_len_question():
                    points = get_points(call.message.chat.id)
                    ans1 = '–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\n\n–í–∞—à —Å—á–µ—Ç ' + points
                    markup = markup.row(types.InlineKeyboardButton('–ï—â–µ —Ä–∞–∑', callback_data='restart'))
                else:
                    ans1 = get_question(status)
                    markup = get_answers(markup, status)
                    status_w(call.message.chat.id)
            # remove inline
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=ans1, reply_markup=markup)

    except Exception as e:
        print(repr(e))

# Handle all other messages with content_type 'text' (content_types defaults to ['text'])
@bot.message_handler(func=lambda message: True)
def echo_message(message):
    bot.reply_to(message, message.text)

bot.infinity_polling()